# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, —Ç.–µ. –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª –≤–∏–¥–∞:
# ‚Ñö={ùëöùëõ,–≥–¥–µ ùëö‚àà‚Ñ§,ùëõ‚àà‚Ñï} . –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
# –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ
# –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏
# –Ω–∞ –Ω–æ–ª—å –∏ –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 
# –≤ –≤–∏–¥–µ –ø–∞—Ä—ã —á–∏—Å–µ–ª m/n.

class Rational_numbers:
    def __init__(self,m,n):
        self.m = m
        self.n = n
        
    def __repr__(self):
        return f"m = {self.m}, n = {self.n}"
    
    def __lt__(self, other):
        if self.m / self.n < other.m / other.n:
            return True
        else:
            return False
        
    def __gt__(self, other):
        if self.m / self.n > other.m / other.n:
            return True
        else:
            return False
        
    def __le__(self, other):
        if self.m / self.n <= other.m/other.n:
            return True
        else:
            return False
        
    def __ge__(self, other):
         if self.m / self.n >= other.m/other.n:
            return True
         else:
            return False
        
    def __eq__(self, other):
        if  self.m / self.n == other.m / other.n:
            return True
        else:
            return False
        
    def __ne__(self, other):
        if  self.m / self.n != other.m / other.n:
            return True
        else:
            return False
    
    def __mul__(self, other):
        if type(other) == int:
            self.mul = self.m * other
            return f"{self.mul}/{self.n}"
        if type(other) == float:
            numerator=other * 10000
            denominator = 10000
            our_num=(self.m * numerator) / (self.n * denominator)
            return round(our_num,4)
        
    
    def __truediv__(self, other):
        if other == 0:
            raise Exception("You cannot divide by zero")
        self.truediv = self.n * other
        answer=round(self.m / self.truediv,4)
        return f"{answer}"
    
    def __str__(self):
        return f'{self.m} / {self.n}'
    
first = Rational_numbers(5,6)
second = Rational_numbers(1,2)
print(first)
print(first / 0)
print(first < second)
print(first > second)
print(first <= second)
print(first >= second)
print(first == second)
print(first != second)
print(first * 2.44)
print(str(first))